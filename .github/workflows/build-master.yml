name: Master

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  IMAGE_NAME: bastillion-dev
  IMAGE_VER: latest

jobs:
  matrix:
    runs-on: ubuntu-latest
    outputs:
      built_matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:  
      - 
        name: Checkout
        uses: actions/checkout@v3
      - 
        name: Load matrix from JSON
        id: set-matrix
        run: |
          output=$(echo $(cat .github/matrix-parameters.json) | sed 's/ //g' )
          echo "::set-output name=matrix::$output"
  build-and-test:
    runs-on: ubuntu-latest
    needs: matrix
    strategy:
      fail-fast: false
      matrix:
        ${{ insert }}: ${{ fromJson(needs.matrix.outputs.built_matrix) }}
        exclude:
          - distribution: alpine
            platform: linux/arm/v7
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_DEPLOY_KEY }}
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Build
        id: build
        env:
          DOCKER_USER: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_PLATFORM: ${{ matrix.platform }}
          DISTRIBUTION: ${{ matrix.distribution }}
          BUILD_NR: ${{ github.run_number }}
        run: |
          BASTILLION_VERSION=$(curl -sSLq https://api.github.com/repos/n-stone/docker-bastillion/releases/latest | jq -r ".name")
          BASTILLION_FILENAME_VERSION=$(echo $BASTILLION_VERSION | sed -r 's/(.*)\./\1_/')
          ARCH=$(echo "$DOCKER_PLATFORM" | awk -F  "/" '{print $2$3}')
          echo "::set-output name=arch::${ARCH}"
          # Fix for 3.14.0
          if [ "${#BASTILLION_FILENAME_VERSION}" -lt 7 ]; then BASTILLION_FILENAME_VERSION=$(echo "${BASTILLION_FILENAME_VERSION}0"); fi
          docker buildx build -t "${DOCKER_USER}/${IMAGE_NAME}:${IMAGE_VER}-${DISTRIBUTION}-${ARCH}-${BUILD_NR}" \
            --platform ${DOCKER_PLATFORM} \
            --build-arg BASTILLION_VERSION=${BASTILLION_VERSION} \
            --build-arg BASTILLION_FILENAME_VERSION=${BASTILLION_FILENAME_VERSION} \
            --file "./Dockerfile.${DISTRIBUTION}" --load .
      -
        name: Setup Tests
        env:
          DOCKER_USER: ${{ secrets.DOCKER_HUB_USERNAME }}
          ARCH: ${{ steps.build.outputs.arch }}
          DOCKER_PLATFORM: ${{ matrix.platform }}
          DISTRIBUTION: ${{ matrix.distribution }}
          BUILD_NR: ${{ github.run_number }}
        run: |
          mkdir $(pwd)/keydb
          chmod 777 $(pwd)/keydb
          docker run -d --platform ${DOCKER_PLATFORM} --rm --name bastillion -v $(pwd)/keydb:/keydb "${DOCKER_USER}/${IMAGE_NAME}:${IMAGE_VER}-${DISTRIBUTION}-${ARCH}-${BUILD_NR}"
          if [[ $DISTRIBUTION == "debian" ]]; then
            export DEBIAN_FRONTEND=noninteractive
            docker exec -u 0 bastillion apt-get update
            docker exec -u 0 bastillion apt-get install net-tools procps -y
          fi
          if [[ $DISTRIBUTION == "alpine" ]]; then
            docker exec -u 0 bastillion apk --no-cache add net-tools procps
          fi
          curl https://omnitruck.chef.io/install.sh | sudo bash -s -- -P inspec
          inspec --chef-license=accept
      -
        name: InSpec Integration Test
        run: |
          echo "Waiting for conatiner to spin up..."
          end=$(($(date +%s)+120))
          until $(docker logs bastillion 2>&1 | grep -q "Started ServerConnector"); do
            echo "since:	$((120+$(date +%s)-$end))s"
            sleep 1
            if [ $(date +%s) -gt $end ]; then
              echo "Container did not spun up within 120 seconds"
              docker logs bastillion
              break
            fi
          done
          inspec exec ./test/integration -t docker://bastillion
      -
        name: Check Logs
        run: |
          if $(docker logs bastillion | grep -q Exception -q); then
            docker logs bastillion
            exit 1
          else:
            echo "No Exceptions"
          fi
      -
        name: Teardown
        run: |
          docker container stop bastillion
          rm -rf keydb
      -
        name: Push image
        env:
          DOCKER_USER: ${{ secrets.DOCKER_HUB_USERNAME }}
          DISTRIBUTION: ${{ matrix.distribution }}
          ARCH: ${{ steps.build.outputs.arch }}
          BUILD_NR: ${{ github.run_number }}
        run: |
          docker tag "${DOCKER_USER}/${IMAGE_NAME}:${IMAGE_VER}-${DISTRIBUTION}-${ARCH}-${BUILD_NR}" "${DOCKER_USER}/${IMAGE_NAME}:${IMAGE_VER}-${DISTRIBUTION}-${ARCH}"
          docker push "${DOCKER_USER}/${IMAGE_NAME}:${IMAGE_VER}-${DISTRIBUTION}-${ARCH}-${BUILD_NR}"
          docker push "${DOCKER_USER}/${IMAGE_NAME}:${IMAGE_VER}-${DISTRIBUTION}-${ARCH}"

  push-shared-tags:
    runs-on: ubuntu-latest
    needs: 
      - build-and-test
    steps:
      - 
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_DEPLOY_KEY }}
      -
        name: Create and push shared manifest
        env:
          DOCKER_USER: ${{ secrets.DOCKER_HUB_USERNAME }}
          BUILD_NR: ${{ github.run_number }}
        run: |
          echo "#!/bin/bash" > push-shared-tags.sh
          for dist in $(cat .github/matrix-parameters.json | jq -c '.distribution[]' -r); do
            echo -n "docker manifest create ${DOCKER_USER}/${IMAGE_NAME}:${IMAGE_VER}-${dist}" >> push-shared-tags.sh
            for arch in $(cat .github/matrix-parameters.json | jq -c '.platform[]' -r | awk -F  "/" '{print $2$3}'); do 
              if ! [ "$dist" = "alpine" -a "$arch" = "armv7" ]; then
                echo -n " ${DOCKER_USER}/${IMAGE_NAME}:${IMAGE_VER}-${dist}-${arch}-${BUILD_NR}" >> push-shared-tags.sh
              fi
            done
            echo "" >> push-shared-tags.sh
            echo "docker manifest push ${DOCKER_USER}/${IMAGE_NAME}:${IMAGE_VER}-${dist}" >> push-shared-tags.sh
          done
          echo -n "docker manifest create ${DOCKER_USER}/${IMAGE_NAME}:${IMAGE_VER}" >> push-shared-tags.sh
          for arch in $(cat .github/matrix-parameters.json | jq -c '.platform[]' -r | awk -F  "/" '{print $2$3}'); do 
            echo -n " ${DOCKER_USER}/${IMAGE_NAME}:${IMAGE_VER}-debian-${arch}-${BUILD_NR}" >> push-shared-tags.sh
          done
          echo "" >> push-shared-tags.sh
          echo "docker manifest push ${DOCKER_USER}/${IMAGE_NAME}:${IMAGE_VER}" >> push-shared-tags.sh
          echo "exit 0" >> push-shared-tags.sh
          cat push-shared-tags.sh
          chmod +x ./push-shared-tags.sh
          ./push-shared-tags.sh 
