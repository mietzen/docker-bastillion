name: Check for new Bastillion releases

on: 
  schedule:
   - cron: "0 12 * * *"
  workflow_dispatch:

jobs:
  check-releases:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.TAGS }}
    steps:
      - 
        id: matrix
        run: |
          python -c "
          import requests, json
          from packaging import version
          docker_bastillion_releases = json.loads(requests.get('https://api.github.com/repos/n-stone/docker-bastillion/git/matching-refs/tags').content.decode('utf-8'))
          latest_docker_bastillion = [x['ref'].split('/')[-1] for x in docker_bastillion_releases][-1:][0]
          bastillion_releases = json.loads(requests.get('https://api.github.com/repos/bastillion-io/Bastillion/git/matching-refs/tags').content.decode('utf-8'))
          releases_to_build = []
          for i in bastillion_releases:
              curr_relase = i['ref'].split('/')[-1].replace('v','')
              if version.parse(curr_relase) > version.parse(latest_docker_bastillion):
                  releases_to_build.append(curr_relase)
          if releases_to_build:
            print('::set-output name=TAGS::{"tag":' + json.dumps(releases_to_build) + '}')
          "
  release:
    runs-on: ubuntu-latest
    if: needs.check-releases.outputs.matrix
    needs: check-releases
    strategy:
      max-parallel: 1
      matrix: ${{fromJson(needs.check-releases.outputs.matrix)}}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3    
      - 
        name: Get Body
        id: body
        env:
          BASTILLION_VERSION: ${{ matrix.tag }}
        run: |
          python -c "
          import requests, json, os
          releases = json.loads(requests.get('https://api.github.com/repos/bastillion-io/Bastillion/releases').content.decode('utf-8'))
          for i in releases:
            if i['name'] == os.getenv('BASTILLION_VERSION'):
                print(i['body'])
          " > /tmp/body.txt
      - 
        name: Create Release
        uses: ncipollo/release-action@v1
        with:
          name: ${{ matrix.tag }}
          tag: ${{ matrix.tag }}
          commit: ${{ env.GITHUB_SHA }}
          token: ${{ secrets.PUSH_TOKEN }}
          bodyFile: "/tmp/body.txt"
